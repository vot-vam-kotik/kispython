import random
import sys

'''Напишите функцию generate_groups(), которая генерирует (не просто выдает готовый)
 список всех названий групп в том виде, который используется на сайте ЦАП.'''
def generate_groups():
    d = {'В': 13, 'К': 30, 'Н': 15, 'М': 2}
    s = ''
    for k, v in d.items():
        for n in range(1, v + 1):
            s += ('И{}БО-{}-20\n'.format(k, str(n).zfill(2)))
    return s


# Реализуйте генератор докладов по цифровой экономике. Данные для генерации извлекаются из таблицы:
def economy_generator():
    part1 = ['Коллеги,', 'В то же время,', 'Однако,', 'Тем не менее,', 'Следовательно,', 'Соответственно,',
             'Вместе с тем,', 'С другой стороны,']
    part2 = ['парадигма цифровой экономики', 'контeкст цифровой трансформации', 'диджитализация бизнeс-процессов',
             'прагматичный подход к цифровым платформам', 'совокупность сквозных тeхнологий',
             'программа прорывных исслeдований', 'ускорeниe блокчeйн-транзакций', 'экспоненциальный рост Big Data']
    part3 = ["открывает новые возможности для", "выдвигает новые требования", "несёт в себе риски",
             "расширяет горизонты", "заставляет искать варианты",
             "не оставляет шанса для", "повышает вероятность", "обостряет проблему"]
    part4 = ["дальнейшего углубления", "бюджетного финансирования", "синергетического эффекта",
             "компрометации конфиденциальных", "универсальной коммодитизации",
             "несанкционированной кастомизации", "нормативного регулирования", "практического применения"]
    part5 = ["знаний и компетенций.", "непроверенных гипотез.", "волатильных активов.",
             "опасных экспериментов.", "государственно-частных партнёрств.",
             "цифровых следов граждан.", "нежелательных последствий.", "внезапных открытий."]
    return random.choice(part1) + " " + random.choice(part2) + " " + random.choice(part3) + " " + random.choice(
        part4) + " " + random.choice(part5)

# Реализуйте свою версию print(). Постарайтесь использовать максимум возможностей настоящей print().
# Для вывода используйте функцию sys.stdout.write().
def func_print(*args, sep=" ", end="\n"):
    sys.stdout.write(sep.join(str(i) for i in args) + end)

# Реализуйте функцию, которая принимает только именованные аргументы.
# При передаче позиционного аргумента Питон должен выдать ошибку.
def func_named_args(**args):
    return args


if __name__ == '__main__':
    print(generate_groups())
    print(economy_generator())

    # сравнение собственного print и встроенного
    print("func_print()->", "python", [5, 8], None, True, sep="\t->\t", end="%\n")
    func_print("func_print()->", "python", [5, 8], None, True, sep="\t->\t", end="%\n")

    # func_named_args(55) # Выдает TypeError: func_named_args() takes 0 positional arguments but 1 was given
    func_named_args(num = 55)


